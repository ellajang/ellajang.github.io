{"version":3,"file":"component---src-pages-frontend-core-tech-css-tsx-0b38806faad697545376.js","mappings":"sNAAO,MAAMA,EAA4B,CACvC,CAAEC,MAAO,KAAMC,MAAO,SACtB,CAAED,MAAO,KAAMC,MAAO,UACtB,CAAED,MAAO,KAAMC,MAAO,QACtB,CAAED,MAAO,UAAWC,MAAO,QAC3B,CAAED,MAAO,KAAMC,MAAO,SAGXC,EAAU,CACrB,CAAEF,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,aAAcC,MAAO,eAGnBE,EAAqB,CAChC,CAAEH,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,aAAcC,MAAO,c,qCCgChC,IAvC8BG,IAG4C,IAH3C,MAC7BC,EAAK,eACLC,GAC2BF,EAC3B,MAAMG,EAA6D,CACjEC,IAAK,KACFF,EAAeG,QAAO,CAACC,EAAMC,KAC9BD,EAAKC,GAAY,EACVD,IACN,CAAC,IA2BN,OAzB2BE,EAAAA,EAAAA,UACzB,IACEP,EAAMI,QACJ,CACEC,EAA2CG,KAMvC,IAJFC,MACEC,aAAa,WAAEC,KAElBH,EASD,OAPAG,EAAWC,SAAQN,IACbL,EAAeY,SAASP,UACHQ,IAAnBT,EAAKC,GAAyBD,EAAKC,GAAY,EAC9CD,EAAKC,KACZ,IAEFD,EAAU,MACHA,CAAI,GAEbH,IAEJ,CAACF,EAAOC,GAGe,C,2KCsB3B,UAnDqCF,IAI/B,IAHJgB,MACEC,mBAAmB,MAAEhB,KAExBD,EACC,MAAMkB,GAAWC,EAAAA,EAAAA,eACXC,GAAsDC,EAAAA,EAAAA,OAC1DH,EAASI,QAELC,EACuB,iBAApBH,EAAOb,UAA0Ba,EAAOb,SAE3Ca,EAAOb,SADP,MAGAL,EAAiBH,EAAAA,GAAAA,KAAuBQ,GAAYA,EAASX,QAC7D4B,GAAqBC,EAAAA,EAAAA,GAAsB,CAC/CxB,QACAC,mBAGIwB,EAAgBzB,EAAM0B,QAAOC,GACjCA,EAAKlB,KAAKC,YAAYC,WAAWE,SAASS,MAGpCM,aAAcC,EAAc,kBAAEC,IACpCC,EAAAA,EAAAA,GAAoBN,EAAeO,EAAAA,GAErC,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACE,EAAAA,EAAoB,MACnBF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,OACPH,EAAAA,EAAAA,KAACI,EAAAA,GAAW,OACZJ,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CAACC,UAAU,uBACjBN,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CACTjB,mBAAoBA,EACpBkB,uBAAwBnB,EACxBoB,SAAU,mBACVC,cAAe7C,EAAAA,MAEjBmC,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CACbtB,iBAAkBA,EAClBuB,MAAOhB,KAETI,EAAAA,EAAAA,KAACH,EAAiB,CAChBgB,KAAM,wBACNxC,SAAUgB,KAGb,C","sources":["webpack://gatsby-starter-default/./src/constants/CategoryName.ts","webpack://gatsby-starter-default/./src/hooks/useDetailCategoryList.tsx","webpack://gatsby-starter-default/./src/pages/frontendCoreTech/CSS.tsx"],"sourcesContent":["export const BASIC_RESOURCE_CATEGORIES = [\n  { value: 'CS', label: '컴퓨터구조' },\n  { value: 'DB', label: '데이터베이스' },\n  { value: 'DS', label: '자료구조' },\n  { value: 'NETWORK', label: '네트워크' },\n  { value: 'OS', label: '운영체제' },\n]\n\nexport const DEV_ENV = [\n  { value: 'REACT', label: 'REACT' },\n  { value: 'TYPESCRIPT', label: 'TYPESCRIPT' },\n]\n\nexport const FRONTEND_CORE_TECH = [\n  { value: 'CSS', label: 'CSS' },\n  { value: 'HTML', label: 'HTML' },\n  { value: 'JAVASCRIPT', label: 'JAVASCRIPT' },\n]\n\nexport const CATEGORY_MAP = [\n  { value: 'CS', label: 'CS' },\n  { value: 'DB', label: 'DB' },\n  { value: 'DS', label: 'DS' },\n  { value: 'NETWORK', label: 'NETWORK' },\n  { value: 'OS', label: 'OS' },\n  { value: 'REACT', label: 'REACT' },\n  { value: 'TYPESCRIPT', label: 'TYPESCRIPT' },\n  { value: 'CSS', label: 'CSS' },\n  { value: 'HTML', label: 'HTML' },\n  { value: 'JAVASCRIPT', label: 'JAVASCRIPT' },\n]\n","import { useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\nimport { DetailListProps } from 'components/CategoryPage/DetailList'\n\ntype useDetailCategoryListProps = {\n  edges: PostListItemType[]\n  categoriesName: string[]\n}\n\nconst useDetailCategoryList = ({\n  edges,\n  categoriesName,\n}: useDetailCategoryListProps): DetailListProps['detailCategoryList'] => {\n  const initialCategoryList: DetailListProps['detailCategoryList'] = {\n    All: 0,\n    ...categoriesName.reduce((list, category) => {\n      list[category] = 0\n      return list\n    }, {} as DetailListProps['detailCategoryList']),\n  }\n  const detailcategoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: DetailListProps['detailCategoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          },\n        ) => {\n          categories.forEach(category => {\n            if (categoriesName.includes(category)) {\n              if (list[category] === undefined) list[category] = 1\n              else list[category]++\n            }\n          })\n          list['All']++\n          return list\n        },\n        initialCategoryList,\n      ),\n    [edges, categoriesName],\n  )\n\n  return detailcategoryList\n}\n\nexport default useDetailCategoryList\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { parse } from 'query-string'\nimport Header from 'components/Common/Header'\nimport Title from 'components/CategoryPage/Title'\nimport DetailList from 'components/CategoryPage/DetailList'\nimport { FRONTEND_CORE_TECH } from '../../constants/CategoryName'\nimport useDetailCategoryList from 'hooks/useDetailCategoryList'\nimport { ThemeContextProvider } from 'hooks/useTheme'\nimport { PageDataProps } from 'types/PostItem.types'\nimport { POSTS_PER_PAGE } from '../../constants/PageEA'\nimport DetailPostList from 'components/CategoryPage/DetailPostList'\nimport { useLocation } from '@reach/router'\nimport GlobalStyle from 'components/Common/GlobalStyle'\nimport { usePaginationFooter } from 'hooks/usePaginationFooter'\n\nconst CSS: React.FC<PageDataProps> = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const location = useLocation()\n  const parsed: { [key: string]: string | string[] | null } = parse(\n    location.search,\n  )\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'CSS'\n      : parsed.category\n\n  const categoriesName = FRONTEND_CORE_TECH.map(category => category.value)\n  const detailCategoryList = useDetailCategoryList({\n    edges,\n    categoriesName,\n  })\n\n  const filteredEdges = edges.filter(edge =>\n    edge.node.frontmatter.categories.includes(selectedCategory),\n  )\n\n  const { currentItems: paginatedPosts, PaginationNFooter } =\n    usePaginationFooter(filteredEdges, POSTS_PER_PAGE)\n\n  return (\n    <>\n      <ThemeContextProvider>\n        <Header />\n        <GlobalStyle />\n        <Title titleText=\"프론트엔드 핵심 기술 / CSS\" />\n        <DetailList\n          detailCategoryList={detailCategoryList}\n          selectedDetailCategory={selectedCategory}\n          basePath={'frontendCoreTech'}\n          categoriesMap={FRONTEND_CORE_TECH}\n        />\n        <DetailPostList\n          selectedCategory={selectedCategory}\n          posts={paginatedPosts}\n        />\n        <PaginationNFooter\n          path={'/frontendCoreTech/CSS'}\n          category={selectedCategory}\n        />\n      </ThemeContextProvider>\n    </>\n  )\n}\nexport default CSS\n\nexport const getDetailPostList = graphql`\n  query getDetailPostList {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n      filter: { fileAbsolutePath: { regex: \"/contents/frontendCoreTech/\" } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["BASIC_RESOURCE_CATEGORIES","value","label","DEV_ENV","FRONTEND_CORE_TECH","_ref","edges","categoriesName","initialCategoryList","All","reduce","list","category","useMemo","_ref2","node","frontmatter","categories","forEach","includes","undefined","data","allMarkdownRemark","location","useLocation","parsed","parse","search","selectedCategory","detailCategoryList","useDetailCategoryList","filteredEdges","filter","edge","currentItems","paginatedPosts","PaginationNFooter","usePaginationFooter","POSTS_PER_PAGE","___EmotionJSX","React","ThemeContextProvider","Header","GlobalStyle","Title","titleText","DetailList","selectedDetailCategory","basePath","categoriesMap","DetailPostList","posts","path"],"sourceRoot":""}