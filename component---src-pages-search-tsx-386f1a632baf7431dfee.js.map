{"version":3,"file":"component---src-pages-search-tsx-386f1a632baf7431dfee.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/hooks/usePosts.tsx","webpack://gatsby-starter-default/./src/components/Search/SearchList.tsx","webpack://gatsby-starter-default/./src/components/Search/Seach.tsx","webpack://gatsby-starter-default/./src/pages/search.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from 'gatsby'\nimport { PostQueryResult } from 'types/PostItem.types'\n\nconst usePosts = () => {\n  const data = useStaticQuery<PostQueryResult>(graphql`\n    query {\n      allMarkdownRemark {\n        nodes {\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            summary\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  `)\n\n  return data.allMarkdownRemark.nodes.map(post => ({\n    title: post.frontmatter.title,\n    date: post.frontmatter.date,\n    slug: post.fields.slug,\n    excerpt: post.excerpt,\n    categories: post.frontmatter.categories,\n    thumbnail: post.frontmatter.thumbnail,\n    summary: post.frontmatter.summary,\n  }))\n}\n\nexport default usePosts\n","import { useContext } from 'react'\n\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { ThemeContext } from 'hooks/useTheme'\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\ntype SearchPostProps = PostFrontmatterType & {\n  slug: string\n}\n\nconst SearchList: React.FC<{ posts: SearchPostProps[] }> = ({ posts }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <ListContainer>\n      {posts.map(post => (\n        <ListItem to={post.slug} theme={theme} key={post.slug}>\n          <ItemWrapper>\n            <Title>{post.title}</Title>\n            <Summary>{post.summary}</Summary>\n            <CategoryDateWrapper>\n              <Category>\n                {post.categories.map(category => (\n                  <CategoryItem key={category} theme={theme}>\n                    {category}\n                  </CategoryItem>\n                ))}\n              </Category>\n              &nbsp; |&nbsp;&nbsp;<Date>{post.date}</Date>\n            </CategoryDateWrapper>\n          </ItemWrapper>\n          <ThumbnailImageContainer>\n            {post.thumbnail?.childImageSharp?.gatsbyImageData && (\n              <ThumbnailImage\n                image={getImage(post.thumbnail.childImageSharp.gatsbyImageData)}\n                alt=\"Post Item Image\"\n              />\n            )}\n          </ThumbnailImageContainer>\n        </ListItem>\n      ))}\n    </ListContainer>\n  )\n}\n\nexport default SearchList\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: calc(100% - 200px);\n  margin: 30px auto;\n  justify-content: space-between;\n  @media (max-width: 768px) {\n    width: calc(100% - 120px);\n    margin: 20px auto;\n  }\n`\n\nconst ListItem = styled(Link)`\n  border-radius: 10px;\n  justify-content: space-between;\n  display: flex;\n  flex-direction: row;\n  padding: 20px;\n  margin-bottom: 10px;\n  width: 100%;\n  color: ${props =>\n    props.theme === 'light' ? '0 0 4px rgba(0, 0, 0, 0.15)' : '#cfd8dc'};\n  flex-grow: 1;\n  position: relative;\n  box-shadow: ${props =>\n    props.theme === 'light'\n      ? '0 0 4px rgba(0, 0, 0, 0.15)'\n      : '0 0 4px rgba(255, 255, 255, 0.4)'};\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n  text-decoration: none;\n  &:hover {\n    box-shadow: ${props =>\n      props.theme === 'light'\n        ? '0 0 3px rgba(0, 0, 0, 0.3)'\n        : '0 0 3px rgba(255, 255, 255, 0.3)'};\n    text-decoration: underline;\n    color: ${props =>\n      props.theme === 'light' ? '0 0 4px rgba(0, 0, 0, 0.15)' : '#cfd8dc'};\n  }\n  @media (max-width: 768px) {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    height: 130px;\n    padding: 15px;\n  }\n`\nconst ItemWrapper = styled.div`\n  flex-direction: column;\n  width: 1200px;\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 28px;\n  font-weight: 700;\n  @media (max-width: 768px) {\n    font-size: 20px;\n    font-weight: 700;\n  }\n`\nconst CategoryDateWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  position: absolute;\n  bottom: 20px;\n  margin: 35px 0 0 -5px;\n  @media (max-width: 768px) {\n    top: 65px;\n    flex-direction: column;\n  }\n`\nconst Category = styled.span`\n  flex-direction: row;\n  display: flex;\n  flex-wrap: wrap;\n  @media (max-width: 768px) {\n    margin-top: -4px;\n  }\n`\nconst Date = styled.span`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n  margin-right: -10px;\n  order: 2;\n  @media (max-width: 768px) {\n    font-size: 13px;\n  }\n`\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: ${props => (props.theme === 'light' ? '#FFEA75' : '#263238')};\n  font-size: 14px;\n  font-weight: 700;\n  color: ${props => (props.theme === 'light' ? '#7d64b1' : 'white')};\n  @media (max-width: 768px) {\n    font-size: 10px;\n  }\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: 20px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  font-size: 17px;\n  opacity: 0.8;\n  order: 0;\n  @media (max-width: 768px) {\n    font-size: 13px;\n    -webkit-line-clamp: 2;\n  }\n`\nconst ThumbnailImageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 200px;\n  height: 200px;\n  border-radius: 30px;\n  margin: 10px;\n  overflow: hidden;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`\n","import { useContext, useState } from 'react'\n\nimport styled from '@emotion/styled'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { ThemeContext } from 'hooks/useTheme'\n\ntype SearchProps = {\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>\n  handleSearch: () => void\n}\n\nconst Search: React.FC<SearchProps> = ({ setSearchTerm, handleSearch }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value)\n  }\n\n  const handleClick = () => {\n    setSearchTerm(inputValue)\n    handleSearch()\n  }\n  const { theme } = useContext(ThemeContext)\n  return (\n    <SearchWrapper theme={theme}>\n      <SearchContainer theme={theme}>\n        <SearchInput\n          theme={theme}\n          value={inputValue}\n          onChange={handleChange}\n          placeholder=\"검색어를 입력하세요.\"\n        />\n        <SearchButton onClick={handleClick}>\n          <SearchIcon />\n        </SearchButton>\n      </SearchContainer>\n    </SearchWrapper>\n  )\n}\n\nexport default Search\n\nconst SearchWrapper = styled.div`\n  position: relative;\n  color: #212121;\n  border: '1px solid #b0bec5';\n  border-radius: 10px;\n  background-color: ${props =>\n    props.theme === 'light' ? '#f4f2f2' : '#3C474B'};\n  &:hover {\n    background-color: ${props =>\n      props.theme === 'light' ? '#f4f2f2' : '#3C474B'};\n  }\n  width: 40%;\n  margin: 130px auto;\n  margin-bottom: 60px;\n  @media (max-width: 768px) {\n    width: 90%;\n    margin-top: 100px;\n  }\n`\n\nconst SearchInput = styled.input`\n  padding: 25px;\n  border: none;\n  border-radius: 10px;\n  width: 93%;\n  height: 33px;\n  outline: none;\n  font-size: 16px;\n  color: #212121;\n  background-color: transparent;\n\n  &::placeholder {\n    color: #757575;\n  }\n  @media (max-width: 768px) {\n    padding: 21px;\n  }\n`\n\nconst SearchButton = styled.button`\n  width: 8%;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n  cursor: pointer;\n  border: none;\n  border-radius: 10px;\n  background: #7d64b1;\n  color: white;\n  align-items: center;\n  justify-content: center;\n  @media (max-width: 768px) {\n    width: 10%;\n  }\n`\nconst SearchContainer = styled.div`\n  border-radius: 10px;\n  &:focus-within {\n    box-shadow: 0 0 0 1px\n      ${props => (props.theme === 'dark' ? '#c9d2d7' : '#7d64b1')};\n  }\n`\n","import React, { useState } from 'react'\n\nimport { navigate } from 'gatsby'\nimport { useLocation } from '@reach/router'\nimport queryString from 'query-string'\nimport usePosts from 'hooks/usePosts'\nimport styled from '@emotion/styled'\nimport { ThemeContextProvider } from 'hooks/useTheme'\nimport Header from 'components/Common/Header'\nimport CreateIcon from '@mui/icons-material/Create'\nimport SearchList from 'components/Search/SearchList'\nimport Search from 'components/Search/Seach'\nimport { usePaginationFooter } from 'hooks/usePaginationFooter'\nimport Footer from 'components/Common/Footer'\nimport { Post, PostListItemType } from 'types/PostItem.types'\nimport GlobalStyle from 'components/Common/GlobalStyle'\n\nconst SearchResultsPage: React.FC = () => {\n  const { search } = useLocation()\n  const { term = '', page = '1' } = queryString.parse(search)\n  const [searchTerm, setSearchTerm] = useState(\n    term !== null ? String(term) : '',\n  )\n  const [, setCurrentPage] = useState(page)\n\n  const posts = usePosts()\n  const itemsPerPage = 5\n\n  const filteredPosts: Post[] | PostListItemType[] = posts.filter(\n    post =>\n      post.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      post.date.includes(searchTerm) ||\n      post.slug?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      post.excerpt?.toLowerCase().includes(searchTerm.toLowerCase()),\n  )\n\n  const handleSearch = () => {\n    setCurrentPage(page)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    void navigate(`/search?term=${encodeURIComponent(searchTerm)}&page=${page}`)\n  }\n\n  const { currentItems, PaginationNFooter } = usePaginationFooter(\n    filteredPosts,\n    itemsPerPage,\n  )\n\n  return (\n    <ThemeContextProvider>\n      <Header hideSearch={true} />\n      <GlobalStyle />\n      <Search setSearchTerm={setSearchTerm} handleSearch={handleSearch} />\n      {searchTerm !== '' && (\n        <SeachResult>\n          <h2>\n            검색결과 : {searchTerm} ({filteredPosts.length})\n          </h2>\n        </SeachResult>\n      )}\n      <Divider />\n      {filteredPosts.length > 0 && searchTerm !== '' ? (\n        <>\n          <SearchList posts={currentItems} />\n          <PaginationWrapper>\n            <PaginationNFooter path=\"/search/\" category=\"search results\" />\n          </PaginationWrapper>\n        </>\n      ) : (\n        <NoDataMessage>\n          <CreateIcon />\n          &nbsp; No Posts Available\n          <FooterContainer>\n            <Footer />\n          </FooterContainer>\n        </NoDataMessage>\n      )}\n    </ThemeContextProvider>\n  )\n}\n\nexport default SearchResultsPage\n\nconst NoDataMessage = styled.div`\n  margin: 100px;\n  text-align: center;\n  font-size: 25px;\n  color: gray;\n  @media (max-width: 768px) {\n    font-size: 16px;\n  }\n`\n\nconst FooterContainer = styled.footer`\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  position: absolute;\n`\n\nconst SeachResult = styled.div`\n  margin-left: 80px;\n  color: #6343a8;\n  @media (max-width: 768px) {\n    width: calc(100% - 70px);\n    margin: 20px 0px 0px 40px;\n    font-size: 13px;\n  }\n`\nconst Divider = styled.div`\n  border-top: 0.1px solid #c3c7cc;\n  width: calc(100% - 70px);\n  margin: 30px 0 12px 40px;\n  @media (max-width: 768px) {\n    width: calc(100% - 60px);\n    margin: 20px 0px 0px 30px;\n  }\n`\nconst PaginationWrapper = styled.div`\n  font-size: 15px;\n  position: relative;\n  width: 100%;\n  bottom: 40px;\n  margin-top: -160px;\n  @media (max-width: 768px) {\n    font-size: 13px;\n  }\n`\n"],"names":["usePosts","useStaticQuery","allMarkdownRemark","nodes","map","post","title","frontmatter","date","slug","fields","excerpt","categories","thumbnail","summary","_ref","posts","theme","useContext","ThemeContext","___EmotionJSX","ListContainer","_post$thumbnail","_post$thumbnail$child","ListItem","to","key","ItemWrapper","Title","Summary","CategoryDateWrapper","Category","category","CategoryItem","Date","ThumbnailImageContainer","childImageSharp","gatsbyImageData","ThumbnailImage","image","getImage","alt","_styled","target","name","styles","Link","props","GatsbyImage","setSearchTerm","handleSearch","inputValue","setInputValue","useState","SearchWrapper","SearchContainer","SearchInput","value","onChange","event","placeholder","SearchButton","onClick","handleClick","SearchIcon","SearchResultsPage","search","useLocation","term","page","queryString","searchTerm","String","setCurrentPage","filteredPosts","filter","_post$title","_post$slug","_post$excerpt","toLowerCase","includes","currentItems","PaginationNFooter","usePaginationFooter","ThemeContextProvider","Header","hideSearch","GlobalStyle","Search","navigate","encodeURIComponent","SeachResult","length","Divider","React","SearchList","PaginationWrapper","path","NoDataMessage","CreateIcon","FooterContainer","Footer"],"sourceRoot":""}