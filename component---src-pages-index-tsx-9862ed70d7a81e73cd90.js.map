{"version":3,"file":"component---src-pages-index-tsx-9862ed70d7a81e73cd90.js","mappings":"6NAgBA,MARkDA,IAAsB,IAArB,aAAEC,GAAcD,EACjE,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACE,EAAmB,CAACC,MAAOJ,EAAcK,IAAI,kBAC7C,EAMP,MAAMF,GAAsBG,EAAAA,EAAAA,GAAOC,EAAAA,EAAW,CAAAC,OAAA,aAAlBF,CAAmB,CAAAG,KAAA,UAAAC,OAAA,qH,cCS/C,MAjBkDX,IAAsB,IAArB,aAAEC,GAAcD,EACjE,MAAM,MAAEY,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC7B,OACEZ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACa,EAAU,CAACH,MAAOA,IACjBV,EAAAA,EAAAA,KAACc,EAAO,MACNd,EAAAA,EAAAA,KAACe,EAAY,CAAChB,aAAcA,KAC5BC,EAAAA,EAAAA,KAAA,YACEA,EAAAA,EAAAA,KAACgB,EAAQ,KAAC,+BACVhB,EAAAA,EAAAA,KAACiB,EAAK,KAAC,yDAIZ,EAMP,MAAMJ,GAAUR,EAAAA,EAAAA,GAAA,OAAAE,OAAA,YAAAF,CAAA,sDAGMa,GACF,UAAhBA,EAAMR,MACF,qDACA,wDAAsD,mBAIxDI,GAAOT,EAAAA,EAAAA,GAAA,OAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,sNAgBPO,GAAQX,EAAAA,EAAAA,GAAA,OAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,8EASRQ,GAAKZ,EAAAA,EAAAA,GAAA,OAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,8F,wBCtBX,MAvBkDX,IAG5C,IAH6C,iBACjDqB,EAAgB,aAChBC,GACDtB,EACC,MAAM,MAAEY,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC7B,OACEZ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACqB,EAAmB,KACjBC,OAAOC,QAAQH,GAAcI,KAAIC,IAAA,IAAEjB,EAAMkB,GAAMD,EAAA,OAC9CzB,EAAAA,EAAAA,KAAC2B,EAAY,CACXC,GAAE,cAAgBpB,EAClBqB,OAAQrB,IAASW,EACjBW,IAAKtB,EACLE,MAAOA,GACR,IACGF,EAAK,IAAEkB,EAAM,IACF,KAGlB,EAMP,MAAML,GAAmBhB,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,sIAYnBkB,GAAetB,EAAAA,EAAAA,IAAO0B,IAAA,IAAC,OAAEF,KAAWX,GAAwBa,EAAA,OAChE/B,EAAAA,EAAAA,KAACgC,EAAAA,GAASd,EAAS,GACpB,CAAAX,OAAA,aAFoBF,CAEnB,+DAIe4B,IAAA,IAAC,OAAEJ,GAAQI,EAAA,OAAMJ,EAAS,MAAQ,KAAK,GAAC,0BAE9CX,GAA0B,UAAhBA,EAAMR,MAAoB,QAAU,WAAU,8E,cCvBnE,MAhC0CZ,IASpC,IATqC,MACzCoC,EAAK,KACLC,EAAI,WACJC,EAAU,QACVC,EACAC,WACEC,iBAAiB,gBAAEC,IACpB,KACDC,GACD3C,EACC,MAAM,MAAEY,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC7B,OACEZ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAAC0C,EAAe,CAACd,GAAIa,EAAM/B,MAAOA,IAChCV,EAAAA,EAAAA,KAAC2C,EAAc,CAACxC,MAAOqC,EAAiBpC,IAAI,qBAC5CJ,EAAAA,EAAAA,KAAC4C,EAAe,CAAClC,MAAOA,IACtBV,EAAAA,EAAAA,KAACiB,EAAK,KAAEiB,IACRlC,EAAAA,EAAAA,KAAC6C,EAAI,KAAEV,IACPnC,EAAAA,EAAAA,KAAC8C,EAAQ,KACNV,EAAWZ,KAAIuB,IACd/C,EAAAA,EAAAA,KAAC2B,EAAY,CAACG,IAAKiB,EAAMrC,MAAOA,GAC7BqC,OAIP/C,EAAAA,EAAAA,KAACgD,EAAO,KAAEX,KAGb,EAMP,MAAMO,GAAevC,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,iEAKVa,GAA0B,UAAhBA,EAAMR,MAAoB,QAAU,WAAU,KAE7DgC,GAAkBrC,EAAAA,EAAAA,GAAO2B,EAAAA,GAAI,CAAAzB,OAAA,aAAXF,CAAY,qEAIpBa,GACI,UAAhBA,EAAMR,MACF,8BACA,oCAAkC,kEAIxBQ,GACI,UAAhBA,EAAMR,MACF,8BACA,qCAAmC,MAIvCiC,GAAiBtC,EAAAA,EAAAA,GAAOC,EAAAA,EAAW,CAAAC,OAAA,aAAlBF,CAAmB,CAAAG,KAAA,UAAAC,OAAA,wDAKpCQ,GAAKZ,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,6MAaLoC,GAAIxC,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,+CAMJqC,GAAQzC,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,iEAORkB,GAAYtB,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,kEAIFa,GAA0B,UAAhBA,EAAMR,MAAoB,QAAU,WAAU,0CAG7DQ,GAA0B,UAAhBA,EAAMR,MAAoB,QAAU,WAAU,KAG7DsC,GAAO3C,EAAAA,EAAAA,GAAA,OAAAE,OAAA,aAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,uMCtEb,MAlC0CX,IAAiC,IAAhC,iBAAEqB,EAAgB,MAAE8B,GAAOnD,EACpE,MAAMoD,GAAeC,EAAAA,EAAAA,UACnB,IACEF,EAAMG,QACJ3B,IAAA,IACE4B,MACEC,aAAa,WAAElB,KAEAX,EAAA,MACI,QAArBN,GACIiB,EAAWmB,SAASpC,EAChB,KAEd,CAACA,IAEH,OACEnB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACwD,EAAe,KACbN,EAAa1B,KACZO,IAAA,IACEsB,MAAM,GACJI,EACAC,QAAQ,KAAEC,GAAM,YAChBL,IAEevB,EAAA,OACjB/B,EAAAA,EAAAA,KAAC4D,GAAQC,EAAAA,EAAAA,GAAA,GAAKP,EAAW,CAAEb,KAAMkB,EAAM7B,IAAK2B,IAAM,KAIvD,EAMP,MAAMD,GAAenD,EAAAA,EAAAA,GAAA,OAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,+L,wEC2ErB,MA3E4CX,IAWtC,IAVJgE,MACEC,MACEC,cAAc,MAAE9B,EAAK,YAAE+B,EAAW,QAAEC,IAEtCC,mBAAmB,MAAEC,GACrBC,MACE9B,iBAAiB,gBAAEC,GAAiB,UACpC8B,KAGLxE,EACC,MAAMyE,GAAWC,EAAAA,EAAAA,eACXC,GAAsDC,EAAAA,EAAAA,OAC1DH,EAASI,QAELxD,EACuB,iBAApBsD,EAAOG,UAA0BH,EAAOG,SAE3CH,EAAOG,SADP,MAGAxD,GAAe+B,EAAAA,EAAAA,UACnB,IACEiB,EAAMS,QACJ,CACEC,EAAuCrD,KAMpC,IAJD4B,MACEC,aAAa,WAAElB,KAElBX,EAOD,OALAW,EAAW2C,SAAQH,SACMI,IAAnBF,EAAKF,GAAyBE,EAAKF,GAAY,EAC9CE,EAAKF,IAAW,IAEvBE,EAAU,MACHA,CAAI,GAEb,CAAEG,IAAK,KAEX,KAEMC,aAAcC,EAAc,QAAEC,IAAYC,EAAAA,EAAAA,GAChDjB,EACAkB,EAAAA,GAGF,OACEtF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,KAACuF,EAAAA,EAAoB,MACnBvF,EAAAA,EAAAA,KAACwF,EAAAA,EAAM,OACPxF,EAAAA,EAAAA,KAACyF,EAAAA,GAAW,OACZzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAQ,CACPxD,MAAOA,EACP+B,YAAaA,EACb0B,IAAKzB,EACL/D,MAAOmE,IAEPtE,EAAAA,EAAAA,KAAC4F,EAAY,CAAC7F,aAAcyC,KAC5BxC,EAAAA,EAAAA,KAAC6F,EAAY,CACX1E,iBAAkBA,EAClBC,aAAcA,KAEhBpB,EAAAA,EAAAA,KAAC8F,EAAQ,CACP7C,MAAOkC,EACPhE,iBAAkBA,KAEpBnB,EAAAA,EAAAA,KAAC+F,EAAAA,EAAU,CAACrE,MAAO0D,EAASY,KAAM,OAGrC,C","sources":["webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/components/Main/Introduction.tsx","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport React from 'react'\n\ntype ProfileImageProps = {\n  profileImage: IGatsbyImageData\n}\n\nconst ProfileImage: React.FC<ProfileImageProps> = ({ profileImage }) => {\n  return (\n    <>\n      <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\n    </>\n  )\n}\n\nexport default ProfileImage\n\nconst ProfileImageWrapper = styled(GatsbyImage)`\n  width: 130px;\n  height: 130px;\n  margin-bottom: 40px;\n  border-radius: 50%;\n\n  @media (max-width: 768px) {\n    width: 80px;\n    height: 80px;\n  }\n`\n","import styled from '@emotion/styled'\nimport React, { useContext } from 'react'\nimport ProfileImage from './ProfileImage'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { ThemeContext } from 'hooks/useTheme'\n\ntype IntroductionProps = {\n  profileImage: IGatsbyImageData\n}\n\nconst Introduction: React.FC<IntroductionProps> = ({ profileImage }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <>\n      <Background theme={theme}>\n        <Wrapper>\n          <ProfileImage profileImage={profileImage} />\n          <div>\n            <SubTitle>Frontend Developer's Diary</SubTitle>\n            <Title>Record and Share Space of Frontend Developer, Ella</Title>\n          </div>\n        </Wrapper>\n      </Background>\n    </>\n  )\n}\n\nexport default Introduction\n\nconst Background = styled.div`\n  box-sizing: border-box;\n  width: 98vw;\n  background-image: ${props =>\n    props.theme === 'light'\n      ? 'linear-gradient(30deg, #90a4ae 100%, #90a4ae 100%)'\n      : 'linear-gradient(30deg, #11151990 100%, #12171b 120%)'};\n  color: #ffffff;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n  width: 768px;\n  height: 380px;\n  margin: 0px auto;\n  margin-bottom: 40px;\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 330px;\n    padding: 0 20px;\n  }\n`\n\nconst SubTitle = styled.div`\n  font-size: 20px;\n  font-weight: 400;\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`\n\nconst Title = styled.div`\n  margin-top: 20px;\n  font-size: 30px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`\n","import styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { ThemeContext } from 'hooks/useTheme'\nimport React, { ReactNode, useContext } from 'react'\n\nexport type CategoryListProps = {\n  selectedCategory: string\n  categoryList: {\n    [key: string]: number\n  }\n}\n\ntype GatsbyLinkProps = {\n  children: ReactNode\n  className?: string\n  to: string\n  active: boolean\n}\n\nconst CategoryList: React.FC<CategoryListProps> = ({\n  selectedCategory,\n  categoryList,\n}) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <>\n      <CategoryListWrapper>\n        {Object.entries(categoryList).map(([name, count]) => (\n          <CategoryItem\n            to={`/?category=${name}`}\n            active={name === selectedCategory}\n            key={name}\n            theme={theme}\n          >\n            #{name}({count})\n          </CategoryItem>\n        ))}\n      </CategoryListWrapper>\n    </>\n  )\n}\n\nexport default CategoryList\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 100px auto 0;\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 49px;\n    padding: 0 20px;\n  }\n`\n\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${({ active }) => (active ? '900' : '400')};\n  cursor: pointer;\n  color: ${props => (props.theme === 'light' ? 'black' : '#cfd8dc')};\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`\n","import styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { ThemeContext } from 'hooks/useTheme'\nimport React, { useContext } from 'react'\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItem: React.FC<PostItemProps> = ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <>\n      <PostItemWrapper to={link} theme={theme}>\n        <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n        <PostItemContent theme={theme}>\n          <Title>{title}</Title>\n          <Date>{date}</Date>\n          <Category>\n            {categories.map(item => (\n              <CategoryItem key={item} theme={theme}>\n                {item}\n              </CategoryItem>\n            ))}\n          </Category>\n          <Summary>{summary}</Summary>\n        </PostItemContent>\n      </PostItemWrapper>\n    </>\n  )\n}\n\nexport default PostItem\n\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  color: ${props => (props.theme === 'light' ? 'black' : '#cfd8dc')};\n`\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: ${props =>\n    props.theme === 'light'\n      ? '0 0 8px rgba(0, 0, 0, 0.15)'\n      : '0 0 8px rgba(255, 255, 255, 0.4)'};\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n  &:hover {\n    box-shadow: ${props =>\n      props.theme === 'light'\n        ? '0 0 10px rgba(0, 0, 0, 0.3)'\n        : '0 0 10px rgba(255, 255, 255, 0.3)'};\n  }\n`\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px 10px 0 0;\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n`\n\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: ${props => (props.theme === 'light' ? 'black' : '#263238')};\n  font-size: 14px;\n  font-weight: 700;\n  color: ${props => (props.theme === 'light' ? 'white' : '#cfd8dc')};\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.8;\n`\n","import React, { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from './PostItem'\nimport { PostListItemType, PostListProps } from 'types/PostItem.types'\n\nconst PostList: React.FC<PostListProps> = ({ selectedCategory, posts }) => {\n  const postListData = useMemo(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }: PostListItemType) =>\n          selectedCategory !== 'All'\n            ? categories.includes(selectedCategory)\n            : true,\n      ),\n    [selectedCategory],\n  )\n  return (\n    <>\n      <PostListWrapper>\n        {postListData.map(\n          ({\n            node: {\n              id,\n              fields: { slug },\n              frontmatter,\n            },\n          }: PostListItemType) => (\n            <PostItem {...frontmatter} link={slug} key={id} />\n          ),\n        )}\n      </PostListWrapper>\n    </>\n  )\n}\n\nexport default PostList\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`\n","import React, { useMemo } from 'react'\nimport Introduction from 'components/Main/Introduction'\nimport Template from 'components/Common/Template'\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\nimport PostList from 'components/Main/PostList'\nimport { graphql } from 'gatsby'\nimport { PostListItemType } from 'types/PostItem.types'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { parse } from 'query-string'\nimport Pagination from 'components/Common/Pagination'\nimport Header from 'components/Common/Header'\nimport { ThemeContextProvider } from 'hooks/useTheme'\nimport GlobalStyle from 'components/Common/GlobalStyle'\nimport { POSTS_PER_PAGE } from '../constants/PageEA'\nimport { usePaginationFooter } from 'hooks/usePaginationFooter'\nimport { useLocation } from '@reach/router'\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      publicURL: string\n    }\n  }\n}\n\nconst IndexPage: React.FC<IndexPageProps> = ({\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) => {\n  const location = useLocation()\n  const parsed: { [key: string]: string | string[] | null } = parse(\n    location.search,\n  )\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          },\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n          list['All']++\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n  const { currentItems: paginatedPosts, maxPage } = usePaginationFooter(\n    edges,\n    POSTS_PER_PAGE,\n  )\n\n  return (\n    <>\n      <ThemeContextProvider>\n        <Header />\n        <GlobalStyle />\n        <Template\n          title={title}\n          description={description}\n          url={siteUrl}\n          image={publicURL}\n        >\n          <Introduction profileImage={gatsbyImageData} />\n          <CategoryList\n            selectedCategory={selectedCategory}\n            categoryList={categoryList}\n          />\n          <PostList\n            posts={paginatedPosts}\n            selectedCategory={selectedCategory}\n          />\n          <Pagination count={maxPage} path={''} />\n        </Template>\n      </ThemeContextProvider>\n    </>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\n"],"names":["_ref","profileImage","___EmotionJSX","React","ProfileImageWrapper","image","alt","_styled","GatsbyImage","target","name","styles","theme","useContext","ThemeContext","Background","Wrapper","ProfileImage","SubTitle","Title","props","selectedCategory","categoryList","CategoryListWrapper","Object","entries","map","_ref2","count","CategoryItem","to","active","key","_ref3","Link","_ref4","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","PostItemWrapper","ThumbnailImage","PostItemContent","Date","Category","item","Summary","posts","postListData","useMemo","filter","node","frontmatter","includes","PostListWrapper","id","fields","slug","PostItem","_extends","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","publicURL","location","useLocation","parsed","parse","search","category","reduce","list","forEach","undefined","All","currentItems","paginatedPosts","maxPage","usePaginationFooter","POSTS_PER_PAGE","ThemeContextProvider","Header","GlobalStyle","Template","url","Introduction","CategoryList","PostList","Pagination","path"],"sourceRoot":""}